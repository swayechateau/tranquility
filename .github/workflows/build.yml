name: Rust Build, Lint, and Artifact Deployment

on:
  workflow_dispatch:
    inputs:
      # JSON array of targets to build
      targets:
        description: 'JSON array of compilation targets'
        required: false
        default: '[
          "x86_64-unknown-linux-gnu",
          "aarch64-unknown-linux-gnu",
          "x86_64-apple-darwin",
          "aarch64-apple-darwin",
          "x86_64-pc-windows-msvc",
          "aarch64-pc-windows-msvc"]'
  push:
    branches:
      - rust-app
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        target: ${{ fromJson(github.event.inputs.targets) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Add target ${{ matrix.target }}
        run: rustup target add ${{ matrix.target }}

      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo git index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy --all-targets -- -D warnings

      - name: Build & test (Debug) for ${{ matrix.target }}
        run: |
          cargo build --verbose --target ${{ matrix.target }}
          cargo test  --verbose --target ${{ matrix.target }}

      - name: Build (Release) for ${{ matrix.target }}
        if: github.event_name == 'release'
        run: cargo build --release --verbose --target ${{ matrix.target }}

      - name: Upload release artifact for ${{ matrix.target }}
        if: github.event_name == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.os }}-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/*
